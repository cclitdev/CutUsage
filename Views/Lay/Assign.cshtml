@model CutUsage.Models.LayMaster
@using System.Linq

@{
    ViewData["Title"] = "Assign Docket — Lay " + Model.LayID;
    var dockets = ViewData["Dockets"] as IEnumerable<CutUsage.Models.DocketLookup>
               ?? Enumerable.Empty<CutUsage.Models.DocketLookup>();
}

<h2>
    @ViewData["Title"]
    <small class="text-muted">(Marker: @ViewBag.MarkerName)</small>
</h2>

<form asp-action="Assign" method="post" class="mt-4">
    @Html.AntiForgeryToken()
    <input type="hidden" name="layID" value="@Model.LayID" />

    <div class="form-group">
        <label>Select Docket</label>

        <!-- the text-input that the user types into -->
        <input name="selected"
               class="form-control"
               list="docketsList"
               autocomplete="off"
               placeholder="Type to search…"
               required />

        <!-- the list of suggestions -->
        <datalist id="docketsList">
            @foreach (var x in dockets)
            {
                @* we pack DocketNo and SO in the value, split on '|' in your POST *@
                <option value="@($"{x.DocketNo}|{x.SO}")"></option>
            }
        </datalist>

        @Html.ValidationMessage("selected", "", new { @class = "text-danger" })
    </div>


    <button type="submit" class="btn btn-primary">Assign</button>
    <a asp-action="Details" asp-route-id="@Model.LayID" class="btn btn-link">Cancel</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
