@model CutUsage.Models.MarkerPlanCreateViewModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Create Marker Plan";
    var styles = ViewBag.Styles as List<CutUsage.Models.StyleM>
                 ?? new List<CutUsage.Models.StyleM>();
}
@section Styles {
    <style>
        /* hide number‐input spinners in Chrome, Safari, Edge */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        /* hide number‐input spinners in Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }

        /* 1) Target *your* wrapper (#matrixContainer), *not* the old #buildPlanMatrixContainer */
        #matrixContainer table {
            font-size: .75rem;
        }

        /* 2) Make Marker Name at least 20 characters wide */
        #matrixContainer th.marker-name-col,
        #matrixContainer .marker-name-input {
            min-width: 20ch;
            /* or if you want a fixed width: width: 20ch; */
        }

        /* 3) Tighter numeric columns (adjust the nth‐of‐type indexes as needed) */
        /* e.g. “No of Plies” is column 10, “Total Size Count” is 11: */
        #matrixContainer th:nth-of-type(10),
        #matrixContainer td:nth-of-type(10),
        #matrixContainer th:nth-of-type(11),
        #matrixContainer td:nth-of-type(11) {
            min-width: 6ch;
            text-align: center;
        }

        /* 4) Allowance + totals can be a bit wider */
        #matrixContainer .allowance-input,
        #matrixContainer .fabric-req-cell,
        #matrixContainer .marker-usage-cell,
        #matrixContainer .marker-saving-cell,
        #matrixContainer .target-length-cell {
            min-width: 8ch;
            text-align: right;
        }

        /* 5) Header styling */
        .table-striped thead th {
            background-color: #f8f9fa;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0,123,255,.05);
        }

    </style>
}
<h2>@ViewData["Title"]</h2>

<div asp-validation-summary="All" class="text-danger mb-3"></div>
@* <div class="alert alert-info">
    <p>
        This form allows you to create a marker plan by selecting a style, associated sales orders (SO), and dockets.
        After selection, a matrix will be generated where you can input marker details.
    </p>
    <p>
        The matrix will automatically calculate fabric requirements, marker usage, savings, and target lengths based on your inputs.
    </p>
    <p>
        Use the "Reset Table" button to clear the matrix inputs and computed cells, or "Reset All" to clear the entire form.
    </p>
</div> *@

@* 1) ValidationSummary for DataAnnotations *@
<div asp-validation-summary="All" class="text-danger mb-3"></div>

@* 2) Explicit list of binding/conversion errors *@
@if (ViewBag.BindErrors is List<dynamic> errs && errs.Any())
{
    <div class="alert alert-danger">
        <strong>Binding errors:</strong>
        <ul>
            @foreach (var e in errs)
            {
                <li>@e.Field: @e.Message</li>
            }
        </ul>
    </div>
}
<form id="planForm" class="mb-4" method="post" asp-action="CreateMarkerPlan">
    <div class="row g-3 mb-3">
        <div class="col-12 col-md-3">
            <label for="styleInput" class="form-label">Select Style</label>

            <!-- free-text input that shows matching options from the datalist -->
            <input list="styleList"
                   id="styleInput"
                   name="Style"
                   class="form-control"
                   placeholder="Type or paste style…" />

            <datalist id="styleList">
                @foreach (var st in styles)
                {
                    <option value="@st.Style"></option>
                }
            </datalist>
        </div>

        <div class="col-12 col-md-3">
            <label for="soSelect" class="form-label">Select SO(s)</label>
            <select id="soSelect"
                    name="SelectedSO"
                    class="form-select"
                    multiple
                    disabled>
            </select>
        </div>

        <div class="col-12 col-md-3">
            <label for="docketSelect" class="form-label">Select Docket(s)</label>
            <select id="docketSelect"
                    name="SelectedDocket"
                    class="form-select"
                    multiple
                    disabled>
            </select>
        </div>
        <div class="col-12 col-md-3">
            <div class="col-12 col-md-12">
                <button type="button"
                        id="resetTableBtn"
                        class="btn btn-secondary w-100">
                    Reset Table
                </button>
            </div>
            <br />
            <div class="col-12 col-md-12">
                <button type="button"
                        id="resetAllBtn"
                        class="btn btn-warning w-100">
                    Reset All
                </button>
            </div>
            <br />
            <div class="col-12 col-md-12">
                <button type="submit" class="btn btn-primary w-100">Save Plan</button>
            </div>

        </div>
    </div>

    @* Mirror selected arrays as hidden inputs for post-back *@
    @if (Model.SelectedSO != null)
    {
        foreach (var so in Model.SelectedSO)
        {
            <input type="hidden" name="SelectedSO" value="@so" />
        }
    }
    @if (Model.SelectedDocket != null)
    {
        foreach (var d in Model.SelectedDocket)
        {
            <input type="hidden" name="SelectedDocket" value="@d" />
        }
    }

    <div id="matrixContainer">
        @* Partial view will be injected here *@
    </div>


</form>

@section Scripts {
    <script>
        const styleEl = document.getElementById('styleInput'),
            soEl = document.getElementById('soSelect'),
            dockEl = document.getElementById('docketSelect'),
            matrixCt = document.getElementById('matrixContainer'),
            resetTableBtn = document.getElementById('resetTableBtn'),
            resetAllBtn = document.getElementById('resetAllBtn'),
            formEl = document.getElementById('planForm');

        const matrixCache = {
            ratios: {},
            plies: {},
            markerNames: {},
            lengths: {},
            widths: {},
            allowances: {}
        };

        function cacheMatrixValues() {
            matrixCt.querySelectorAll('.ratio-input').forEach(input => {
                matrixCache.ratios[`${input.dataset.docket}_${input.dataset.size}`] = input.value;
            });

            matrixCt.querySelectorAll('.plies-input').forEach(input => {
                matrixCache.plies[input.dataset.docket] = input.value;
            });

            matrixCt.querySelectorAll('.marker-name-input').forEach(input => {
                matrixCache.markerNames[input.dataset.docket] = input.value;
            });

            matrixCt.querySelectorAll('.marker-length-input').forEach(input => {
                matrixCache.lengths[input.dataset.docket] = input.value;
            });

            matrixCt.querySelectorAll('.marker-width-input').forEach(input => {
                matrixCache.widths[input.dataset.docket] = input.value;
            });

            matrixCt.querySelectorAll('.allowance-input').forEach(input => {
                matrixCache.allowances[input.dataset.docket] = input.value;
            });
        }

        function restoreMatrixValues() {
            matrixCt.querySelectorAll('.ratio-input').forEach(input => {
                const key = `${input.dataset.docket}_${input.dataset.size}`;
                if (matrixCache.ratios[key] !== undefined) {
                    input.value = matrixCache.ratios[key];
                }
            });

            matrixCt.querySelectorAll('.plies-input').forEach(input => {
                if (matrixCache.plies[input.dataset.docket] !== undefined) {
                    input.value = matrixCache.plies[input.dataset.docket];
                }
            });

            matrixCt.querySelectorAll('.marker-name-input').forEach(input => {
                if (matrixCache.markerNames[input.dataset.docket] !== undefined) {
                    input.value = matrixCache.markerNames[input.dataset.docket];
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                }
            });

            matrixCt.querySelectorAll('.marker-length-input').forEach(input => {
                if (matrixCache.lengths[input.dataset.docket] !== undefined) {
                    input.value = matrixCache.lengths[input.dataset.docket];
                }
            });

            matrixCt.querySelectorAll('.marker-width-input').forEach(input => {
                if (matrixCache.widths[input.dataset.docket] !== undefined) {
                    input.value = matrixCache.widths[input.dataset.docket];
                }
            });

            matrixCt.querySelectorAll('.allowance-input').forEach(input => {
                if (matrixCache.allowances[input.dataset.docket] !== undefined) {
                    input.value = matrixCache.allowances[input.dataset.docket];
                }
            });
        }

        function clearMatrixCache() {
            matrixCache.ratios = {};
            matrixCache.plies = {};
            matrixCache.markerNames = {};
            matrixCache.lengths = {};
            matrixCache.widths = {};
            matrixCache.allowances = {};
        }

        formEl.addEventListener('submit', () => {
            soEl.disabled = false;
            dockEl.disabled = false;
        });

        resetTableBtn.addEventListener('click', () => {
            matrixCt.querySelectorAll('input').forEach(i => {
                if (i.type === 'number') i.value = 0;
                else i.value = '';
                i.dispatchEvent(new Event('input', { bubbles: true }));
            });

            matrixCt.querySelectorAll('.row-total-size, .fabric-req-cell, .marker-usage-cell, .marker-saving-cell, .target-length-cell').forEach(c => c.textContent = '0');

            document.getElementById('fabricTotalCell').textContent = '';
            document.getElementById('markerSavingTotalCell').textContent = '';

            buildPlanMatrixInit();
            setupCentralCalculation();

            clearMatrixCache();
        });

        resetAllBtn.addEventListener('click', () => {
            styleEl.value = '';
            soEl.innerHTML = '';
            soEl.disabled = true;
            dockEl.innerHTML = '';
            dockEl.disabled = true;
            matrixCt.innerHTML = '';

            clearMatrixCache();
        });

        styleEl.addEventListener('change', async () => {
            const style = styleEl.value;
            soEl.disabled = dockEl.disabled = true;
            soEl.innerHTML = '<option>Loading…</option>';
            dockEl.innerHTML = '';

            if (!style) {
                soEl.innerHTML = '<option>— choose a style —</option>';
                return;
            }

            const resp = await fetch(`/Lay/GetSOsByStyle?style=${encodeURIComponent(style)}`);
            const items = await resp.json();
            soEl.innerHTML = items.map(i => `<option value="${i.value}">${i.text}</option>`).join('');
            soEl.disabled = false;
        });

        soEl.addEventListener('change', async () => {
            const selectedSOs = [...soEl.selectedOptions].map(o => o.value);
            dockEl.disabled = true;
            dockEl.innerHTML = '<option>Loading…</option>';
            if (!selectedSOs.length) {
                dockEl.innerHTML = '';
                return;
            }
            const qs = selectedSOs.map(s => `so=${encodeURIComponent(s)}`).join('&');
            const resp = await fetch(`/Lay/GetDocketsBySO?${qs}`);
            const items = await resp.json();
            dockEl.innerHTML = items.map(i => `<option value="${i.value}">${i.text}</option>`).join('');
            dockEl.disabled = false;
        });

        dockEl.addEventListener('change', async () => {
            cacheMatrixValues();

            const selectedSOs = [...soEl.selectedOptions].map(o => o.value),
                selectedDocs = [...dockEl.selectedOptions].map(o => o.value);

            if (!selectedDocs.length) {
                matrixCt.innerHTML = '';
                return;
            }

            const qs = [
                ...selectedSOs.map(s => `so=${encodeURIComponent(s)}`),
                ...selectedDocs.map(d => `docket=${encodeURIComponent(d)}`)
            ].join('&');

            const resp = await fetch(`/Lay/BuildPlanMatrix?${qs}`);
            matrixCt.innerHTML = await resp.text();

            buildPlanMatrixInit();
            setupPropagation();
            setupCentralCalculation();

            restoreMatrixValues();
        });


        function buildPlanMatrixInit() {
            const vmScript = document.getElementById('matrix-data'),
                vm = vmScript
                    ? JSON.parse(vmScript.textContent)
                    : { Sizes: [], QtyMap: {}, ExistingCut: {} },
                sizes = vm.Sizes,
                orderMap = vm.QtyMap,
                existingMap = vm.ExistingCut;

            function recalc() {
                let totalCalc = 0,
                    totalRemain = 0;
                const ratios = {}, plies = {};

                document.querySelectorAll('.ratio-input').forEach(i => {
                    const d = i.dataset.docket,
                        s = i.dataset.size,
                        v = parseInt(i.value, 10) || 0;
                    if (!ratios[d]) ratios[d] = {};
                    ratios[d][s] = v;

                });

                document.querySelectorAll('.plies-input').forEach(i => {
                    plies[i.dataset.docket] = parseInt(i.value, 10) || 0;
                });

                sizes.forEach(s => {
                    const ord = orderMap[s] || 0,
                        cut = existingMap[s] || 0,
                        used = Object.entries(ratios).reduce((sum, [d, map]) =>
                            sum + (map[s] || 0) * (plies[d] || 0), 0),
                        remain = ord - cut - used;

                    document.getElementById(`calcQty_${s}`).textContent = used;
                    const remEl = document.getElementById(`remainQty_${s}`);
                    remEl.textContent = remain;
                    remEl.style.color = remain >= 0 ? 'green' : 'red';

                    totalCalc += used;
                    totalRemain += remain;
                });

                document.getElementById('calcQtyTotal').textContent = totalCalc;
                const remTotEl = document.getElementById('remainQtyTotal');
                remTotEl.textContent = totalRemain;
                remTotEl.style.color = totalRemain >= 0 ? 'green' : 'red';

                // ----- NEW: compute & display row-level size totals -----
                Object.keys(ratios).forEach(dock => {
                    const sum = Object.values(ratios[dock]).reduce((a, b) => a + b, 0);
                    const cell = document.querySelector(
                        `.row-total-size[data-docket="${dock}"]`
                    );
                    if (cell) cell.textContent = sum;
                });
            }

            document.querySelectorAll('.ratio-input, .plies-input')
                .forEach(i => i.addEventListener('input', recalc));
            recalc();
        }

        function setupPropagation() {
            // Total → plies → recalc
            document.querySelectorAll('.docket-total-input').forEach(input => {
                input.addEventListener('input', () => {
                    const d = input.dataset.docket;
                    const p = document.querySelector(`.plies-input[data-docket="${d}"]`);
                    if (p) {
                        p.value = input.value;
                        p.dispatchEvent(new Event('input', { bubbles: true }));
                    }
                });
            });

            // marker-name → enable + copy length/width + dispatch
            document.querySelectorAll('.marker-name-input').forEach(input => {
                input.addEventListener('input', () => {
                    const name = input.value.trim(),
                        dock = input.dataset.docket,
                        lenEl = document.querySelector(`.marker-length-input[data-docket="${dock}"]`),
                        widEl = document.querySelector(`.marker-width-input[data-docket="${dock}"]`);

                    // enable/disable length & width
                    const enabled = name !== '';
                    lenEl.disabled = !enabled;
                    widEl.disabled = !enabled;

                    if (!enabled) {
                        lenEl.value = '';
                        widEl.value = '';
                        lenEl.dispatchEvent(new Event('input', { bubbles: true }));
                        widEl.dispatchEvent(new Event('input', { bubbles: true }));
                        return;
                    }

                    // copy from any other row with same name
                    document.querySelectorAll('.marker-name-input').forEach(other => {
                        if (other.dataset.docket !== dock && other.value.trim() === name) {
                            const od = other.dataset.docket,
                                srcLen = document.querySelector(`.marker-length-input[data-docket="${od}"]`).value,
                                srcWid = document.querySelector(`.marker-width-input[data-docket="${od}"]`).value;
                            if (srcLen || srcWid) {
                                lenEl.value = srcLen;
                                widEl.value = srcWid;
                                lenEl.dispatchEvent(new Event('input', { bubbles: true }));
                                widEl.dispatchEvent(new Event('input', { bubbles: true }));
                            }
                        }
                    });
                });
            });

            // length propagation + dispatch
            document.querySelectorAll('.marker-length-input').forEach(input => {
                input.addEventListener('input', e => {
                    // ← only run on true user input
                    if (!e.isTrusted) return;

                    const dock = input.dataset.docket,
                        val = input.value,
                        name = document.querySelector(
                            `.marker-name-input[data-docket="${dock}"]`
                        ).value.trim();
                    if (!name) return;

                    document.querySelectorAll('.marker-length-input').forEach(other => {
                        const od = other.dataset.docket,
                            on = document.querySelector(
                                `.marker-name-input[data-docket="${od}"]`
                            ).value.trim();
                        if (od !== dock && on === name) {
                            other.value = val;
                            // this synthetic event will have isTrusted === false
                            other.dispatchEvent(new Event('input', { bubbles: true }));
                        }
                    });
                });
            });

            // width propagation + dispatch
            document.querySelectorAll('.marker-width-input').forEach(input => {
                input.addEventListener('input', e => {
                    if (!e.isTrusted) return;

                    const dock = input.dataset.docket,
                        val = input.value,
                        name = document.querySelector(
                            `.marker-name-input[data-docket="${dock}"]`
                        ).value.trim();
                    if (!name) return;

                    document.querySelectorAll('.marker-width-input').forEach(other => {
                        const od = other.dataset.docket,
                            on = document.querySelector(
                                `.marker-name-input[data-docket="${od}"]`
                            ).value.trim();
                        if (od !== dock && on === name) {
                            other.value = val;
                            other.dispatchEvent(new Event('input', { bubbles: true }));
                        }
                    });
                });
            });
        }

        function setupCentralCalculation() {
            const vmScript = document.getElementById('matrix-data'),
                vm = vmScript ? JSON.parse(vmScript.textContent) : { Sizes: [], QtyMap: {}, ExistingCut: {} },
                sizes = vm.Sizes;

            function recalc() {
                let totalCalc = 0, totalRemain = 0;
                const ratios = {}, plies = {};

                document.querySelectorAll('.ratio-input').forEach(i => {
                    const d = i.dataset.docket,
                        s = i.dataset.size,
                        v = parseInt(i.value, 10) || 0;
                    if (!ratios[d]) ratios[d] = {};
                    ratios[d][s] = v;
                });

                document.querySelectorAll('.plies-input').forEach(i => {
                    plies[i.dataset.docket] = parseInt(i.value, 10) || 0;
                });

                sizes.forEach(s => {
                    const ord = vm.QtyMap[s] || 0,
                        cut = vm.ExistingCut[s] || 0,
                        used = Object.entries(ratios).reduce((sum, [d, map]) =>
                            sum + (map[s] || 0) * (plies[d] || 0), 0),
                        remain = ord - cut - used;

                    document.getElementById(`calcQty_${s}`).textContent = used;
                    const remEl = document.getElementById(`remainQty_${s}`);
                    remEl.textContent = remain;
                    remEl.style.color = remain >= 0 ? 'green' : 'red';

                    totalCalc += used;
                    totalRemain += remain;
                });

                document.getElementById('calcQtyTotal').textContent = totalCalc;
                const remTotEl = document.getElementById('remainQtyTotal');
                remTotEl.textContent = totalRemain;
                remTotEl.style.color = totalRemain >= 0 ? 'green' : 'red';
            }

            function calcFabric(dock) {
                const len = parseFloat(document.querySelector(`.marker-length-input[data-docket="${dock}"]`).value) || 0,
                    allow = parseFloat(document.querySelector(`.allowance-input[data-docket="${dock}"]`).value) || 0,
                    ply = parseInt(document.querySelector(`.plies-input[data-docket="${dock}"]`).value, 10) || 0,
                    fab = (len + allow) * ply,
                    cell = document.querySelector(`.fabric-req-cell[data-docket="${dock}"]`);
                if (cell) cell.textContent = fab.toFixed(3);
            }

            function calcUsage(dock) {
                // read Fabric Requirement
                const fab = parseFloat(
                    document.querySelector(`.fabric-req-cell[data-docket="${dock}"]`)
                        .textContent
                ) || 0;

                // read Total Size Count
                const total = parseFloat(
                    document.querySelector(`.row-total-size[data-docket="${dock}"]`)
                        .textContent
                ) || 0;

                // compute usage
                const usage = total > 0 ? fab / total : 0;

                // write into the marker-usage-cell
                const cell = document.querySelector(
                    `.marker-usage-cell[data-docket="${dock}"]`
                );
                if (cell) cell.textContent = usage.toFixed(3);
            }

            function calcSaving(dock) {
                const bom = parseFloat(
                    document.querySelector(
                        `.bom-usage-cell[data-docket="${dock}"]`
                    ).textContent
                ) || 0;

                const usage = parseFloat(
                    document.querySelector(
                        `.marker-usage-cell[data-docket="${dock}"]`
                    ).textContent
                ) || 0;

                const total = parseFloat(
                    document.querySelector(
                        `.row-total-size[data-docket="${dock}"]`
                    ).textContent
                ) || 0;

                const saving = (bom - usage) * total;

                const cell = document.querySelector(
                    `.marker-saving-cell[data-docket="${dock}"]`
                );
                if (cell) cell.textContent = saving.toFixed(3);
            }

            /**
        * Target Length = Total Size Count * BOM Usage
        */
            function calcTarget(dock) {
                const total = parseFloat(
                    document.querySelector(`.row-total-size[data-docket="${dock}"]`)
                        .textContent
                ) || 0;

                const bom = parseFloat(
                    document.querySelector(`.bom-usage-cell[data-docket="${dock}"]`)
                        .textContent
                ) || 0;

                const target = total * bom;

                const cell = document.querySelector(
                    `.target-length-cell[data-docket="${dock}"]`
                );
                if (cell) cell.textContent = target.toFixed(3);
            }

            function doAllCalculations() {
                recalc();
                document.querySelectorAll('.plies-input').forEach(i => {
                    const dock = i.dataset.docket;
                    calcFabric(dock);
                    calcUsage(dock);
                    calcSaving(dock);
                    calcTarget(dock);
                });

                let totalFab = 0, totalSave = 0;
                document.querySelectorAll('.fabric-req-cell')
                    .forEach(c => totalFab += parseFloat(c.textContent) || 0);
                document.querySelectorAll('.marker-saving-cell')
                    .forEach(c => totalSave += parseFloat(c.textContent) || 0);

                const fabCell = document.getElementById('fabricTotalCell'),
                    saveCell = document.getElementById('markerSavingTotalCell');
                if (fabCell) {
                    fabCell.textContent = totalFab.toFixed(3);
                    fabCell.style.color = 'blue';      // your first color
                }
                if (saveCell) {
                    saveCell.textContent = totalSave.toFixed(3);
                    saveCell.style.color = 'crimson';   // your second color
                }
            }

            document.querySelectorAll('.ratio-input, .plies-input, .allowance-input, .marker-length-input').forEach(i => {
                i.addEventListener('input', doAllCalculations);
            });

            doAllCalculations();
        }
    </script>
}


